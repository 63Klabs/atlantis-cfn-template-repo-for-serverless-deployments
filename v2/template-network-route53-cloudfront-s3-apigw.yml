AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Serves Static Content (S3) and/or API Gateway via CloudFront with custom domain (Route53) - Deployed using SAM"

# Atlantis for AWS SAM Deployments
# Network Infrastructure Template
# Author: Chad Kluck - chadkluck.me
# Version: v0.0.12/2024-10-22

# Documentation, Issues/Feature Requests, Latest Updates, and Security Reports on GitHub:
# https://github.com/chadkluck/atlantis-for-aws-sam-deployments/

# Apply custom sub-domains via Route53 to static content in an S3 bucket 
# and/or an API Gateway. Static and API can reside on same sub-domains 
# with routing paths or separate sub-domains. For static content, uses a 
# CloudFront distribution with S3 origin access control (OAC). For API 
# Gateway it can use CloudFront or direct routing from Route53. Requires
# existing S3 bucket with access policy and/or existing API Gateway.

# USE WITH:
# - Storage Infrastructure (S3 OAC for CloudFront)
# - and/or Application Infrastructure (API Gateway)
# - Pipeline Infrastructure for content/application 


# =============================================================================
# META DATA
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
#

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:

      - Label:
          default: Application Resource Naming
        Parameters:
          - Prefix
          - ProjectId
          - StageId

      - Label:
          default: Origins such as S3 and API Gateway
        Parameters:
          - S3OriginDomainName
          - ApiGatewayId

      - Label:
          default: Deployment Environment
        Parameters:
          - DeployEnvironment
          - CloudFrontPriceClass
          - DnsRecordTTL

      - Label:
          default: Routing for CloudFront
        Parameters:
          - DomainForCloudFront
          - CustomSubdomainCloudFront
          - PathStatic
          - AcmCertificateArnForCloudFront

      - Label:
          default: Routing for API Gateway
        Parameters:
          - DomainForApiGateway
          - CustomSubdomainApiGateway
          - PathApi
          - AcmCertificateArnForApiGateway

      - Label:
          default: API behind CloudFront Forwarding
        Parameters: 
          - AllowedMethodsForApi
          - HeadersToForwardToApi

# =============================================================================
# PARAMETERS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
#

Parameters:

  # ---------------------------------------------------------------------------
  # Application Resource Naming

  Prefix:
    Type: String
    Description: Prefix pre-pended to all resources. This can be thought of as a
      Name Space used to identify ownership/access for teams, departments, etc.
      For example, resources named ws-* could belong to the web service team and
      could have IAM permissions to allow access to other ws-* resources. The
      Prefix must have a corresponding CloudFormation Service Role. Short,
      descriptive 2-6 character values work best. Due to resource naming length
      restrictions, length of Prefix + Project ID should not exceed 28
      characters. Resources are named
      <Prefix>-<ProjectId>-<StageId>-<ResourceId>
    Default: acme
    AllowedPattern: "^[a-z][a-z0-9-]{0,6}[a-z0-9]$"
    MinLength: 2
    MaxLength: 8
    ConstraintDescription: 2 to 8 characters. Lower case alphanumeric and dashes.
      Must start with a letter and end with a letter or number. Length of Prefix
      + Project ID should not exceed 28 characters.

  ProjectId:
    Type: String
    Description: This is the Project or Application Identifier. If you receive 'S3
      bucket name too long' errors during stack creation, then you must shorten
      the Project ID or use an S3 Org Prefix. Due to resource naming length
      restrictions, length of Prefix + Project ID should not exceed 28
      characters. Resources are named
      <Prefix>-<ProjectId>-<StageId>-<ResourceId>
    AllowedPattern: "^[a-z][a-z0-9-]{0,24}[a-z0-9]$"
    MinLength: 2
    MaxLength: 26
    ConstraintDescription: Minimum of 2 characters (suggested maximum of 20). Lower
      case alphanumeric and dashes. Must start with a letter and end with a
      letter or number. Length of Prefix + Project ID should not exceed 28
      characters.

  StageId:
    Type: String
    Description: This is an alias for the branch. It does not need to match
      CodeCommitBranch or DeployEnvironment. Due to resource naming restrictions
      you can use this to provide shorter names without special characters that
      are allowed in branch names. For example if you have a 'test/feature-98'
      branch, you could use 'tf98' as the StageId. Resources are named
      <Prefix>-<ProjectId>-<StageId>-<ResourceId>
    AllowedPattern: "^[a-z][a-z0-9-]{0,6}[a-z0-9]$"
    MinLength: 2
    MaxLength: 8
    ConstraintDescription: 2 to 8 characters. Lower case alphanumeric and dashes.
      Must start with a letter and end with a letter or number.

  # ---------------------------------------------------------------------------
  # Origins

  S3OriginDomainName:
    Type: String
    Description: If deploying static content to S3, an already existing S3 
      bucket to deploy static content to. Leave blank if not deploying
      static content from S3. This must be the Domain listed in 
      the Outputs of the CloudFormation stack that created the bucket. 
      This is also available from the S3 bucket properties.
    AllowedPattern: "^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]\\.s3\\.(([a-z0-9-]+)\\.)?amazonaws\\.com$|^$"
    ConstraintDescription: Must be a valid Bucket Domain Name.
    Default: ""

  ApiGatewayId:
    Type: String
    Description: If deploying an API, an already existing API Gateway to deploy 
      to. Leave blank if not deploying an API Gateway custom domain. This must 
      be the API Gateway ID that is found in the API domain. For example, xyz123abc 
      would be the ID from xyz123abc.execute-api.us-east-1.amazonaws.com.
    AllowedPattern: "^[a-z0-9]{1,14}$|^$"
    ConstraintDescription: Must be a valid API Gateway ID. May only contain alphanumeric characters.
    Default: ""

  # ---------------------------------------------------------------------------
  # Deployment Environment

  DeployEnvironment:
    Type: String
    Description: 'What deploy/testing environment will this run under? An
      environment can contain multiple stages (for example ''test'' and ''t98''
      would be in ''TEST'' environment, and ''beta'' and ''prod'' stages would
      deploy to ''PROD''). Utilize this environment variable to determine your
      tests, app logging levels, TTLs and conditionals in the template. 
      For example, PROD will use longer TTLs and caches while DEV and TEST 
      will use shorter.'
    Default: PROD
    AllowedValues:
      - DEV
      - TEST
      - PROD
    ConstraintDescription: Must specify DEV, TEST, or PROD.

  CloudFrontPriceClass:
    Type: String
    Description: Price class for CloudFront distribution. For more information, see
      https://aws.amazon.com/cloudfront/pricing/. PROD deployments will use this value.
      DEV and TEST deployments will ignore this value and use PriceClass_100. Set this
      value based on what you want during PROD deployments.
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_All
      - PriceClass_100
      - PriceClass_200
    ConstraintDescription: Must specify a valid CloudFront price class.

  # ---------------------------------------------------------------------------
  # Routing Configuration - CloudFront Distribution

  DomainForCloudFront:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone with
      corresponding * certificate in ACM. Required if you are using an S3 origin
      for static content. If you are only deploying a custom domain for API Gateway,
      then leave this and the rest of the fields in this section blank. example.com
    AllowedPattern: '^(?!-)[a-zA-Z0-9-\\.]{1,63}(?<!-)$|^$'
    ConstraintDescription: must be a valid DNS zone name.
    Default: ""

  CustomSubdomainCloudFront:
    Type: String
    Description: 'The sub-domain to be placed before the DomainForCloudFront.
      If CustomSubdomainCloudFront is ''hello'' and the DomainForCloudFront is
      ''example.com'' then ''hello.example.com'' would be the resulting domain (Also,
      if stage is not prod, then the stage will be appended eg: hello-test.example.com).
      Leave blank if you are not deploying a CloudFront distribution.'
    AllowedPattern: '^(?!-)[a-zA-Z0-9-\\.]{1,63}(?<!-)$|^$'
    ConstraintDescription: Must be a valid sub-domain that is covered by the ACM Certificate.
    Default: ''

  PathStatic:
    Type: String
    Description: 'If you are placing BOTH an S3 Origin with static content AND
      an API Gateway behind the distribution then you will need to specify either
      a path for static OR the api. For example.com/static use ''static''. Leave 
      blank to serve from root. Only one path level is accepted'
    AllowedPattern: '^(?!-)[a-zA-Z0-9\\-]{0,63}(?<!-)$'
    ConstraintDescription: May only contain alphanumeric characters and dashes.
    Default: ''

  AcmCertificateArnForCloudFront:
    Type: String
    Description: "The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate. 
      Since this is for a CloudFront distribution, this certificate MUST be in us-east-1"
    AllowedPattern: "^arn:aws:acm:us-east-1:.*$|^$"
    ConstraintDescription: Must be a valid ACM certificate ARN in us-east-1.
    Default: ''

  # ---------------------------------------------------------------------------
  # Routing Configuration - API Gateway

  DomainForApiGateway:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone with
      corresponding * certificate in ACM. If you plan on placing your API Gateway
      behind CloudFront, leave this blank as DomainForCloudFront will be used
      instead. DomainForApiGateway is used for a stand-alone API Gateway. 
      If you are not deploying an API Gateway, then leave this and the rest of
      the fields in this section blank. example-apis.com
    AllowedPattern: "^(?!-)[a-z0-9-\\.]{3,196}(?<!-)$|^$"
    ConstraintDescription: must be a valid DNS zone name.
    Default: ""

  CustomSubdomainApiGateway:
    Type: String
    Description: 'The sub-domain to be placed before the DomainForApiGateway.
      If you are deploying an API Gateway behind CloudFront, then leave this blank.
      If CustomSubdomainApiGateway is ''hello'' and the DomainForApiGateway is
      ''example-apis.com'' then ''hello.example-apis.com'' would be the resulting domain (Also,
      if not prod, stage will be appended eg: hello-test.example-apis.com)'
    AllowedPattern: "^(?!-)[a-zA-Z0-9-\\.]{1,62}(?<!-)$|^$"
    ConstraintDescription: Must be a valid sub-domain that is covered by the ACM Certificate.
    Default: ''

  PathApi:
    Type: String
    Description: 'You need either PathApi or PathStatic if they share a CloudFront distribution.
      Leave blank to serve your API from the root of the domain.'
    AllowedPattern: '^(?!-)[a-zA-Z0-9\\-]{0,63}(?<!-)$'
    ConstraintDescription: May only contain alphanumeric characters and dashes.
    Default: ''

  AcmCertificateArnForApiGateway:
    Type: String
    Description: "The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate. 
      This certificate MUST be in the same region as the API Gateway resource. If you are placing 
      your API Gateway behind CloudFront, leave this blank."
    AllowedPattern: "^arn:aws:acm:.*$|^$"
    ConstraintDescription: "Must be a valid ACM certificate ARN in the same region as the API Gateway resource."
    Default: ''

  # ---------------------------------------------------------------------------
  # Forwarding for API Gateway behind CloudFront

  HeadersToForwardToApi:
    Type: CommaDelimitedList
    Description: 'If you are placing an API Gateway behind CloudFront, you will
      need to specify the headers that you want to forward to the API. For example,
      if you want to forward the X-Forwarded-For header, then specify ''X-Forwarded-For''
      in this list. Leave blank if you are not placing API Gateway behind a CloudFront
      Distribution or you are not forwarding any headers to the API.'
    Default: 'Accept,Origin,Referer,User-Agent,Authorization'

# =============================================================================
# CONDITIONS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
#

Conditions:
  IsProduction: !Equals
    - !Ref DeployEnvironment
    - PROD

  IsProdStage: !Equals 
    - !Ref StageId
    - "prod"

  HasStaticOrigin: !Not
    - !Equals
      - !Ref S3OriginDomainName
      - ''

  HasApiGatewayOrigin: !Not
    - !Equals
      - !Ref ApiGatewayId
      - ''

  HasRouteForStaticOrigin: !Not
    - !Equals
      - !Ref PathStatic
      - ''

  HasRouteForApi: !Not
    - !Equals
      - !Ref PathApi
      - ''

  StaticOriginIsRoot: !And
    - !Condition HasStaticOrigin
    - !Equals
      - !Ref PathStatic
      - ''

  ApiIsBehindCloudFront: !And 
    - !Condition HasApiGatewayOrigin
    - !Equals
      - !Ref DomainForApiGateway
      - ''

  HasRouteForApiInCloudFront: !And
    - !Condition HasRouteForApi
    - !Condition ApiIsBehindCloudFront

  CloudFrontHasRoutes: !Or
    - !Condition HasRouteForStaticOrigin
    - !And
      - !Condition HasRouteForApi
      - !Condition ApiIsBehindCloudFront 

  CreateDistribution: !Or
    - !Condition HasStaticOrigin
    - !Condition ApiIsBehindCloudFront

  CreateDnsRecordForCloudFront:
    # We require all 3 domain parameters for Route53, but they are optional if Route53 is not needed
    !And
    - !Not
      - !Equals
        - !Ref DomainForCloudFront
        - ''
    - !Not
      - !Equals
        - !Ref CustomSubdomainCloudFront
        - ''
    - !Not
      - !Equals
        - !Ref AcmCertificateArnForCloudFront
        - ''

  CreateDnsRecordForApiGateway:
    # We require all 3 domain parameters for Route53, but they are optional if Route53 is not needed
    !And
    - !Not
      - !Equals
        - !Ref DomainForApiGateway
        - ''
    - !Not
      - !Equals
        - !Ref CustomSubdomainApiGateway
        - ''
    - !Not
      - !Equals
        - !Ref AcmCertificateArnForApiGateway
        - ''

  HasHeadersToForwardToApi: !Not
    - !Equals # Requires string, so we join the list (possibly empty)
      - !Join
        - ''
        - !Ref HeadersToForwardToApi
      - ''

# =============================================================================
# RESOURCES
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html  
#

Resources:

  # Creates a new CloudFront distribution with an S3 origin, OAC enabled, and HTTPS redirection.
  # We will create a distribution only if we have an S3 origin AND/OR we have a path for the API
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateDistribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${Prefix}-${ProjectId}-${StageId}"
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        PriceClass: !If [ IsProduction, !Ref CloudFrontPriceClass, "PriceClass_100" ]
        DefaultRootObject: index.html

        # Logging:
        #   IncludeCookies: 'false'
        #   Bucket: amzn-s3-demo-logging-bucket.s3.amazonaws.com
        #   Prefix: myprefix

        Origins:
          - !If
            - HasStaticOrigin
            - DomainName: !Ref S3OriginDomainName
              Id: StaticS3Origin
              OriginAccessControlId: !Ref CloudFrontOriginAccessControl
              OriginPath: !Sub "/${StageId}/public"
              S3OriginConfig:
                OriginAccessIdentity: ''
            - !Ref AWS::NoValue
          - !If
            - ApiIsBehindCloudFront
            - DomainName: !Sub "${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com"
              Id: ApiGatewayOrigin
              OriginPath: !Sub "/${ProjectId}-${StageId}"
              CustomOriginConfig:
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
            - !Ref AWS::NoValue

        DefaultCacheBehavior:
          CachePolicyId: !If [ StaticOriginIsRoot, !Ref CloudFrontCachePolicyStatic, !Ref CloudFrontCachePolicyApi ]
          TargetOriginId: !If [ StaticOriginIsRoot, "StaticS3Origin", "ApiGatewayOrigin" ]
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          AllowedMethods: !If
          - StaticOriginIsRoot
          - [HEAD, GET, OPTIONS]
          - [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          CachedMethods: [HEAD, GET, OPTIONS]

        CacheBehaviors:
          - !If 
            - HasRouteForStaticOrigin
            - PathPattern: !Sub "/${PathStatic}/*"
              AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              CachePolicyId: !Ref CloudFrontCachePolicyStatic
              TargetOriginId: StaticS3Origin
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            - Ref: AWS::NoValue
          - !If 
            - HasRouteForApiInCloudFront
            - PathPattern: !Sub "/${PathApi}/*"
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              CachePolicyId: !Ref CloudFrontCachePolicyApi
              TargetOriginId: ApiGatewayOrigin
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            - Ref: AWS::NoValue

        CustomErrorResponses: 
          !If 
          - HasStaticOrigin
          - - ErrorCode: 403
              ResponsePagePath: /index.html
              ResponseCode: 200
              ErrorCachingMinTTL: 300
            - ErrorCode: 404
              ResponsePagePath: /index.html
              ResponseCode: 200
              ErrorCachingMinTTL: 300
          - Ref: AWS::NoValue

        Aliases:
          !If
          - CreateDnsRecordForCloudFront
          - - !If
              - IsProdStage
              - !Sub "${CustomSubdomainCloudFront}.${DomainForCloudFront}"
              - !Sub "${CustomSubdomainCloudFront}-${StageId}.${DomainForCloudFront}"
          - - !Ref AWS::NoValue
        ViewerCertificate:
          CloudFrontDefaultCertificate: !If [ CreateDnsRecordForCloudFront, !Ref AWS::NoValue, true]
          AcmCertificateArn: !If [ CreateDnsRecordForCloudFront, !Ref AcmCertificateArnForCloudFront, !Ref AWS::NoValue ] 
          SslSupportMethod: !If [ CreateDnsRecordForCloudFront, 'sni-only', !Ref AWS::NoValue ]
      Tags:
        # Required Tags for permissions since the distribution arn is randomly generated
        - Key: atlantis:Application
          Value: !Sub "${Prefix}-${ProjectId}"
        - Key: atlantis:ApplicationDeploymentId
          Value: !Sub "${Prefix}-${ProjectId}-${StageId}"
        - Key: atlantis:Prefix
          Value: !Sub "${Prefix}"

  CloudFrontOriginAccessControl:
    Condition: HasStaticOrigin
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Prefix}-${ProjectId}-${StageId}-Static-CFOAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontCachePolicyStatic:
    Type: AWS::CloudFront::CachePolicy
    Condition: HasStaticOrigin
    Properties:
      CachePolicyConfig:
        Name: !Sub "${Prefix}-${ProjectId}-${StageId}-Static-CachePolicy"
        Comment: S3 Origin
        DefaultTTL: !If [ IsProduction, 86400, 3 ]
        MaxTTL: !If [ IsProduction, 31536000, 10 ]
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          QueryStringsConfig:
            QueryStringBehavior: none
          HeadersConfig:
            HeaderBehavior: none

  CloudFrontCachePolicyApi:
    Type: AWS::CloudFront::CachePolicy
    # Condition: ApiIsBehindCloudFront
    Properties:
      CachePolicyConfig:
        Name: !Sub "${Prefix}-${ProjectId}-${StageId}-Api-CachePolicy"
        Comment: Api Origin
        DefaultTTL: 10
        MaxTTL: 30
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          QueryStringsConfig:
            QueryStringBehavior: all
          HeadersConfig: !If 
            - HasHeadersToForwardToApi
            - HeaderBehavior: whitelist
              Headers: !Ref HeadersToForwardToApi
            - HeaderBehavior: none

  # --------------------------------------------------
  # Route53 for CloudFront Distribution Custom Domain
  
  Route53RecordForCloudFront:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateDnsRecordForCloudFront
    Properties:
      HostedZoneName: !Sub "${DomainForCloudFront}."
      RecordSets:
        # If production, set name to CustomSubdomainCloudFront + DomainForCloudFront, else, append StageId to the CustomSubdomainCloudFront
        - Name: !If [ IsProdStage, !Sub "${CustomSubdomainCloudFront}.${DomainForCloudFront}", !Sub "${CustomSubdomainCloudFront}-${StageId}.${DomainForCloudFront}"]
          SetIdentifier: !Sub "${Prefix}-${ProjectId}-${StageId}"
          Weight: 1
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName

  # --------------------------------------------------
  # Route53 for API Gateway Custom Domain

  ApiGatewayV2DomainName: # Creates the domain name
    Type: AWS::ApiGatewayV2::DomainName
    Condition: CreateDnsRecordForApiGateway
    Properties: 
      DomainName: !If
        - IsProdStage
        - !Sub "${CustomSubdomainApiGateway}.${DomainForApiGateway}"
        - !Sub "${CustomSubdomainApiGateway}-${StageId}.${DomainForApiGateway}"
      DomainNameConfigurations: 
        - EndpointType: REGIONAL
          CertificateArn: !Ref AcmCertificateArnForApiGateway

  ApiGatewayV2ApiMapping: #Create a mapping to a REST API
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: CreateDnsRecordForApiGateway
    Properties: 
      ApiId: !Ref ApiGatewayId
      DomainName: !Ref ApiGatewayV2DomainName
      ApiMappingKey: !If [ HasRouteForApi, !Ref PathApi, !Ref AWS::NoValue ]
      Stage: !Sub "${ProjectId}-${StageId}"

  Route53RecordForApi:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateDnsRecordForApiGateway
    Properties:
      HostedZoneName: !Sub "${DomainForApiGateway}."
      RecordSets:
        - Name: !Ref ApiGatewayV2DomainName
          SetIdentifier: !Sub "${Prefix}-${ProjectId}-${StageId}-ApiGateway"
          Weight: 1
          Type: A
          AliasTarget:
            DNSName: !GetAtt ApiGatewayV2DomainName.RegionalDomainName
            HostedZoneId: !GetAtt ApiGatewayV2DomainName.RegionalHostedZoneId

# =============================================================================
# OUTPUTS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#
# Place anything interesting that you would like to quickly refer to in 
# your cloudformation OUTPUT section. Test URLs, direct links to resources, etc
#

Outputs:
  CloudFrontDomain:
    Condition: CreateDistribution
    Description: Domain for CloudFront distribution.
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudFrontDistributionId:
    Condition: CreateDistribution
    Description: ID of CloudFront distribution for static website.
    Value: !GetAtt CloudFrontDistribution.Id

  ApiGatewayOrigin:
    Condition: HasApiGatewayOrigin
    Description: API Gateway Origin.
    Value: !Sub "${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com/${ProjectId}-${StageId}"

  S3Origin: 
    Condition: HasStaticOrigin
    Description: S3 Origin.
    Value: !Sub "${S3OriginDomainName}/${StageId}/public"

  ApiGatewayDomainName:
    Condition: CreateDnsRecordForApiGateway
    Description: Domain name of API Gateway.
    Value: !Ref ApiGatewayV2DomainName

  ApiGatewayDomainNameRegional:
    Condition: CreateDnsRecordForApiGateway
    Description: Regional URL of API Gateway domain name.
    Value: !GetAtt ApiGatewayV2DomainName.RegionalDomainName

  CustomURLForStatic:
    Condition: HasStaticOrigin
    Description: Custom domain and path for static content
    Value: !Join 
      - ''
      - - !If
          - IsProdStage
          - !Sub "${CustomSubdomainCloudFront}.${DomainForCloudFront}"
          - !Sub "${CustomSubdomainCloudFront}-${StageId}.${DomainForCloudFront}"
        - !If
          - HasRouteForStaticOrigin
          - !Sub "/${PathStatic}"
          - ''

  CustomURLForApi:
    Condition: HasApiGatewayOrigin
    Description: Custom domain and path for API
    Value: !Join 
      - ''
      - - !If 
          - ApiIsBehindCloudFront
          - !If
            - IsProdStage
            - !Sub "${CustomSubdomainCloudFront}.${DomainForCloudFront}"
            - !Sub "${CustomSubdomainCloudFront}-${StageId}.${DomainForCloudFront}"
          - !Ref ApiGatewayV2DomainName
        - !If
          - HasRouteForApi
          - !Sub "/${PathApi}"
          - ''
