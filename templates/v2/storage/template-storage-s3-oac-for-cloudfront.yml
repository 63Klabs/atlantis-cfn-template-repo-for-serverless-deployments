AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "CloudFront distribution with S3 origin access control (OAC). Includes CloudFront cache invalidation - Deployed using SAM"

# Atlantis for AWS SAM Deployments
# Storage Infrastructure Template
# Author: Chad Kluck - 63klabs.net
# Version: v0.0.12/2024-10-22

# Documentation, Issues/Feature Requests, Latest Updates, and Security Reports on GitHub:
# https://github.com/63klabs/atlantis-cfn-template-repo-for-serverless-deployments/


# =============================================================================
# META DATA
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
# 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Resource Naming"
        Parameters:
          - Prefix
          - ProjectId
          - S3BucketNameOrgPrefix
          - RolePath
      -
        Label:
          default: "External Resources and Alarm Notifications"
        Parameters:
          - AlarmNotificationEmail
          - PermissionsBoundaryARN
          - S3LogBucketName

# =============================================================================
# PARAMETERS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
#

Parameters:

  # ---------------------------------------------------------------------------
  # Application Resource Naming

  Prefix:
    Type: String
    Description: "Prefix pre-pended to all resources. This can be thought of as a Name Space used to identify ownership/access for teams, departments, etc. For example, resources named ws-* could belong to the web service team and could have IAM permissions to allow access to other ws-* resources. The Prefix must have a corresponding CloudFormation Service Role. Short, descriptive 2-6 character values work best. Due to resource naming length restrictions, length of Prefix + Project ID should not exceed 28 characters. Resources are named <Prefix>-<ProjectId>-<StageId>-<ResourceId>"
    Default: "acme" 
    AllowedPattern: "^[a-z][a-z0-9-]{0,6}[a-z0-9]$"
    MinLength: 2
    MaxLength: 8
    ConstraintDescription: "2 to 8 characters. Lower case alphanumeric and dashes. Must start with a letter and end with a letter or number. Length of Prefix + Project ID should not exceed 28 characters."

  ProjectId:
    Type: String
    Description: "This is the Project or Application Identifier. If you receive 'S3 bucket name too long' errors during stack creation, then you must shorten the Project ID or use an S3 Org Prefix. Due to resource naming length restrictions, length of Prefix + Project ID should not exceed 28 characters. Resources are named <Prefix>-<ProjectId>-<StageId>-<ResourceId>"
    AllowedPattern: "^[a-z][a-z0-9-]{0,24}[a-z0-9]$"
    MinLength: 2
    MaxLength: 26
    ConstraintDescription: "Minimum of 2 characters (suggested maximum of 20). Lower case alphanumeric and dashes. Must start with a letter and end with a letter or number. Length of Prefix + Project ID should not exceed 28 characters."

  S3BucketNameOrgPrefix:
    Type: String
    Description: "By default, to enforce uniqueness, buckets include account and region in the bucket name. However, due to character limits, you can specify your own S3 prefix (like an org code). This will be used in addition to the Prefix entered above. Note that this length is shared with the recommended length of 20 characters for Resource Identifiers. So if you have a 10 character S3BucketNameOrgPrefix, you are limited to 10 characters for your bucket name identifier in your templates. Buckets are named <Prefix>-<Region>-<AccountId>-<ProjectId>-<StageId>-<ResourceId> or <S3OrgPrefix>-<Prefix>-<ProjectId>-<StageId>-<ResourceId>"
    Default: ""
    AllowedPattern: "^[a-z0-9][a-z0-9-]{0,18}[a-z0-9]$|^$"
    ConstraintDescription: "May be empty or 2 to 20 characters (8 or less recommended). Lower case alphanumeric and dashes. Must start and end with a letter or number."

  RolePath:
    Type: String
    Description: "Path to use for IAM Roles and Policies. You may wish to separate out your applications from users, or create seperate paths per prefix or application. Specific paths may required by permission boundaries. Ex: /ws-hello-world-test/ or /app_role/"
    Default: "/"
    AllowedPattern: "^\\/([a-zA-Z0-9-_]+[\\/])+$|^\\/$"
    ConstraintDescription: "May only contain alphanumeric characters, forward slashes, underscores, and dashes. Must begin and end with a slash."

  # ---------------------------------------------------------------------------
  # Deployment Environment

  # DeployRole:
  #   Type: String
  #   Description: "IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions"

  # ---------------------------------------------------------------------------
  # External Resources and Alarm Notifications

  AlarmNotificationEmail:
    Type: String
    Description: "Email address to send notifications to when alarms are triggered. Be sure to check the inbox as you will need to confirm the subscription."
    AllowedPattern: "^[\\w\\-\\.]+@([\\w\\-]+\\.)+[\\w\\-]{2,4}$"
    ConstraintDescription: "A valid email address"

  PermissionsBoundaryARN:
    Type: String
    Description: "Permissions Boundary is a policy attached to a role to further restrict the permissions of the role. Your organization may or may not require boundaries. If left empty, no permissions boundary will be used."
    Default: ""
    AllowedPattern: "^$|^arn:aws:iam::\\d{12}:policy\\/[\\w+=,.@\\-\\/]*[\\w+=,.@\\-]+$"
    ConstraintDescription: "Must be empty or a valid IAM Policy ARN in the format: arn:aws:iam::{account_id}:policy/{policy_name}"

  S3LogBucketName:
    Type: String
    Description: "The name of the S3 bucket used for logging. This is a required parameter for the S3 bucket."
    Default: ""
    AllowedPattern: "^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$|^$"
    ConstraintDescription: "Must be a valid S3 bucket name or empty. Must be between 3 and 63 characters long. Lower case alphanumeric and dashes. Must start and end with a letter or number."

# =============================================================================
# CONDITIONS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
#

Conditions:
  UseS3BucketNameOrgPrefix: !Not [!Equals [!Ref S3BucketNameOrgPrefix, ""]]
  HasPermissionsBoundaryARN: !Not [!Equals [!Ref PermissionsBoundaryARN, ""]]
  HasLoggingBucket: !Not [!Equals [!Ref S3LogBucketName, ""]]

# =============================================================================
# RESOURCES
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html  
#
Resources:
  
  # Creates a new S3 bucket with SSE and public access blocked.
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete # Set to Delete because if we delete the stack, we don't need the bucket - don't need to retain data
    Properties:
      BucketName: !Join
        - "-"
        - - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}" ]
          - !Sub "${ProjectId}-${AWS::Region}-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration: !If
      - HasLoggingBucket
      - DestinationBucketName: !Ref S3LogBucketName
        LogFilePrefix: !Join
          - "-"
          - - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}" ]
            - !Sub "${ProjectId}-${AWS::Region}-${AWS::AccountId}"
      - !Ref AWS::NoValue

      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt CloudFrontInvalidator.Arn
          - Event: "s3:ObjectRemoved:*"
            Function: !GetAtt CloudFrontInvalidator.Arn
          - Event: "s3:LifecycleExpiration:*"
            Function: !GetAtt CloudFrontInvalidator.Arn
            # Ideally we would generate event on PROD and public objects, however, AWS DOES NOT support what is listed below. 
            # You can only supply one prefix and/or one suffix filter and you can't use wildcards, so UNTIL greater complexity
            # is supported, we must do this in the lambda function. It means more lambda executions but we'll save on fewer
            # invalidation requests.
            # Note: This is here as an example of what we would LIKE to do, but is UNSUPPORTED
            # This would need to be included for each Event type above
            # Filter: # S3Key filters only allow prefix or suffix filters (no wildcards)
            #   S3Key:
            #     Rules: # We only care about PROD and public instances
            #       - Name: prefix
            #         Value: beta/public
            #       - Name: prefix
            #         Value: stage/public
            #       - Name: prefix
            #         Value: prod/public


  # Creates a bucket policy giving OAC read-only access to the S3 bucket.
  # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "DenyNonSecureTransportAccess"
            Effect: Deny
            Principal: "*"
            Action: 's3:*'
            Resource:
              - !GetAtt Bucket.Arn
              - !Join [ '/', [ !GetAtt Bucket.Arn, '*' ] ]
            Condition:
              Bool:
                "aws:SecureTransport": false
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Action:
            - 's3:GetObject'
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Resource: !Sub "${Bucket.Arn}/*" # TODO: Add in ${aws:???Tag/Stage}/public/*
            Condition:
              StringLike:
                "aws:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"
              # StringEquals:
              #   "aws:ResourceTag/atlantis:Application": !Sub "${Prefix}-${ProjectId}"
          - Sid: AllowCodeBuildReadWriteDelete
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Resource: !Sub "${Bucket.Arn}/*" # TODO: Add in ${aws:???Tag/Stage}
            Condition:
              StringLike:
                "aws:SourceArn": !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Prefix}-${ProjectId}-*"

  
  CloudFrontInvalidator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Prefix}-${ProjectId}-CloudFrontInvalidator"
      Description: Invalidates content in a cloudfront distro when S3 content changes.
      Role: !GetAtt CloudFrontInvalidatorRole.Arn
      Runtime: python3.12
      MemorySize: 512
      Timeout: 30
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          # https://rewind.com/blog/automatic-cloudfront-invalidation-for-s3-origins/
          # Modified to take into account origin path
          # Since we have one bucket that serves multiple orgins we need to find the 
          # distribution that corresponds to the origin that caused the event.
          # We know the origin path is the first two elements /{stageId}/public so
          # we include that with the bucket name when we do a search for a distribution
          # with a matching origin domain and path.

          import boto3
          import json
          import urllib
          import time
          import os

          origin_path_depth = 3 # because of initial / ['',{stageId},'public'] so when we join those parts it come back with the initial slash: /{stageId}/public
          aws_region = os.environ['AWS_REGION']

          cloudfront_client = boto3.client('cloudfront')

          def get_cloudfront_distribution_id(bucket, origin_path):
              
              # !GetAtt Bucket.DomainName produces a Global S3 Domain while going through the Web Console in CloudFront uses a Regional S3 domain
              bucket_origin_regional = bucket + '.s3.' + aws_region + '.amazonaws.com'
              bucket_origin_global = bucket + '.s3.amazonaws.com'
              cf_distro_id = None

              # Create a reusable Paginator - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudfront/paginator/ListDistributions.html
              paginator = cloudfront_client.get_paginator('list_distributions')

              # Create a PageIterator from the Paginator
              page_iterator = paginator.paginate()

              for page in page_iterator:
                  for distribution in page['DistributionList']['Items']:
                      for cf_origin in distribution['Origins']['Items']:
                          if (bucket_origin_regional  == cf_origin['DomainName'] or bucket_origin_global == cf_origin['DomainName']) and origin_path == cf_origin['OriginPath']:
                              cf_distro_id = distribution['Id']
                              print("The CF distribution ID for {}{} is {}".format(bucket,origin_path,cf_distro_id))

              return cf_distro_id


          # --------------- Main handler ------------------
          def lambda_handler(event, context):
              '''
              Creates a cloudfront invalidation for content added to an S3 bucket
              '''
              # Log the the received event locally.
              # print("Received event: " + json.dumps(event, indent=2))

              # Get the object info from the event.
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])
              s3_event = event['Records'][0]['eventName']
              origin_path = ''
              cf_distro_id = None

              if not key.startswith('/'):
                  key = '/' + key

              # Separate out Origin Path from Key
              path_parts = key.split('/',origin_path_depth)

              # Filter out non-production, non-public objects since the S3 filter event can't
              if len(path_parts) > origin_path_depth and path_parts[origin_path_depth-1] == 'public':
                  stageId = path_parts[1]

                  # If stageId starts with prod, beta, or stage then proceed
                  if stageId.startswith('prod') or stageId.startswith('beta') or stageId.startswith('stage'):
                      
                      # We took out the origin path, so that leaves the key as the last part of path_parts
                      key = '/' + path_parts[origin_path_depth]
                      origin_path = '/'.join(path_parts[:origin_path_depth])

                      print("Event: {}, Bucket: {}, Origin Path: {}, Key: {}".format(s3_event,bucket,origin_path,key))
                  
                      cf_distro_id = get_cloudfront_distribution_id(bucket, origin_path)

                      if cf_distro_id:
                          print("Creating invalidation for {} on CloudFront distribution {}".format(key,cf_distro_id))

                          try:
                              invalidation = cloudfront_client.create_invalidation(DistributionId=cf_distro_id,
                                      InvalidationBatch={
                                      'Paths': {
                                              'Quantity': 1,
                                              'Items': [key]
                                      },
                                      'CallerReference': str(time.time())
                              })

                              print("Submitted invalidation. ID {} Status {}".format(invalidation['Invalidation']['Id'],invalidation['Invalidation']['Status']))
                          except Exception as e:
                              print("Error processing object {} from bucket {}. Event {}".format(key, bucket, json.dumps(event, indent=2)))
                              raise e
                      else:
                          print("No invalidation needed. Bucket {} with Path {} is not an origin for a CloudFront distribution.".format(bucket, origin_path))
                  else:
                      print("No invalidation needed. Event {} was not for a production environment. Bucket: {} Key: {}".format(s3_event,bucket, key))
              else:
                print("No invalidation needed. Event {} was not for a public path. Bucket: {} Key: {}".format(s3_event,bucket, key))
              
              return 'Success'



  CloudFrontInvalidatorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-ExecutionRole-${ProjectId}-CloudFrontInvalidator"
      Path: !Ref RolePath
      PermissionsBoundary: !If [HasPermissionsBoundaryARN, !Ref PermissionsBoundaryARN, !Ref 'AWS::NoValue' ]

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]

      Policies:
        - PolicyName: !Sub "${Prefix}-${ProjectId}-CloudFrontInvalidatorPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: LambdaAllowSearchForRelatedDistribution
                Effect: Allow
                Action:
                  - 'cloudfront:Get*'
                  - 'cloudfront:ListDistributions'
                Resource: "*"
              - Sid: LambdaAllowCreateInvalidationOnlyOnOwnDistribution
                Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/*"
                Condition:
                  StringEquals:
                    "aws:ResourceTag/atlantis:Application": !Sub "${Prefix}-${ProjectId}"
              - Sid: LambdaAccessToWriteLogs
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt CloudFrontInvalidatorLogGroup.Arn


  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: CloudFrontInvalidator # We use this because we are using !Sub for Function name and Source Arn. Though !Ref would take care of this, it would pose a chicken and egg problem
    Properties:
      FunctionName: !Sub "${Prefix}-${ProjectId}-CloudFrontInvalidator"
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Join
        - "-"
        - - !If [UseS3BucketNameOrgPrefix, !Sub "arn:aws:s3:::${S3BucketNameOrgPrefix}-${Prefix}", !Sub "arn:aws:s3:::${Prefix}" ]
          - !Sub "${ProjectId}-${AWS::Region}-${AWS::AccountId}"

  # ---------------------------------------------------------------------------
  # Logging and Monitoring
  #

  # -- Log Group with a retention policy --

  CloudFrontInvalidatorLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Prefix}-${ProjectId}-CloudFrontInvalidator'
      RetentionInDays: 180

  # -- Lambda Function Error Alarm --

  CloudFrontInvalidatorErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 1
      MetricName: Errors
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 1
      Period: 900
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref CloudFrontInvalidator
      AlarmActions:
        - Ref: CloudFrontInvalidatorErrorAlarmNotification

  # -- Lambda Function Notification for Error Alarm --

  CloudFrontInvalidatorErrorAlarmNotification:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: !Sub 'AWS-Alarm-${Prefix}-${ProjectId}-CloudFrontInvalidator'
        FifoTopic: false
        Subscription:
          - Endpoint: !Ref AlarmNotificationEmail
            Protocol: 'email'

# =============================================================================
# OUTPUTS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#
# Place anything interesting that you would like to quickly refer to in 
# your cloudformation OUTPUT section. Test URLs, direct links to resources, etc
#

Outputs:

  BucketName:
    Description: The S3 Bucket Name used for CloudFront Origin.
    Value: !Ref Bucket

  OriginBucketDomainForCloudFront:
    Description: Domain to use for CloudFront S3 Origin.
    Value: !GetAtt Bucket.DomainName

  AllowedCloudFrontAndCodeBuild:
    Description: Access to bucket is restricted to CloudFront (Read) and CodeBuild (CRUD) with the following atlantis:Application tag value.
    Value: !Sub "${Prefix}-${ProjectId}"

  LoggingBucketName:
    Condition: HasLoggingBucket
    Description: The S3 Bucket Name used for logging.
    Value: !Ref S3LogBucketName
